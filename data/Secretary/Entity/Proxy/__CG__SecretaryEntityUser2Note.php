<?php

namespace Secretary\Entity\Proxy\__CG__\Secretary\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User2Note extends \Secretary\Entity\User2Note implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setNote($note)
    {
        $this->__load();
        return parent::setNote($note);
    }

    public function getNote()
    {
        $this->__load();
        return parent::getNote();
    }

    public function setNoteId($noteId)
    {
        $this->__load();
        return parent::setNoteId($noteId);
    }

    public function getNoteId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["noteId"];
        }
        $this->__load();
        return parent::getNoteId();
    }

    public function setUser($user)
    {
        $this->__load();
        return parent::setUser($user);
    }

    public function getUser()
    {
        $this->__load();
        return parent::getUser();
    }

    public function setUserId($userId)
    {
        $this->__load();
        return parent::setUserId($userId);
    }

    public function getUserId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["userId"];
        }
        $this->__load();
        return parent::getUserId();
    }

    public function setEkey($eKey)
    {
        $this->__load();
        return parent::setEkey($eKey);
    }

    public function getEkey()
    {
        $this->__load();
        return parent::getEkey();
    }

    public function setOwner($owner)
    {
        $this->__load();
        return parent::setOwner($owner);
    }

    public function getOwner()
    {
        $this->__load();
        return parent::getOwner();
    }

    public function setReadPermission($readPermission)
    {
        $this->__load();
        return parent::setReadPermission($readPermission);
    }

    public function getReadPermission()
    {
        $this->__load();
        return parent::getReadPermission();
    }

    public function setWritePermission($writePermission)
    {
        $this->__load();
        return parent::setWritePermission($writePermission);
    }

    public function getWritePermission()
    {
        $this->__load();
        return parent::getWritePermission();
    }

    public function getDateCreated()
    {
        $this->__load();
        return parent::getDateCreated();
    }

    public function getDateUpdated()
    {
        $this->__load();
        return parent::getDateUpdated();
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'userId', 'noteId', 'eKey', 'readPermission', 'writePermission', 'owner', 'dateCreated', 'dateUpdated', 'user', 'note');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}